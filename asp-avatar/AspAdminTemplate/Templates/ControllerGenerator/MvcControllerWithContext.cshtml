@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using System.Collections.Generic;
@using System.Linq;
@using System.Reflection;

@{
    #region Init Params
    bool isThisAComposedModel = IsThisClassHasAttribute("AspAdminTemplate.Attributes.ComposedAttribute");

    string routePrefix;
    if (String.IsNullOrEmpty(Model.AreaName))
    {
        routePrefix = Model.ControllerRootName;
    }
    else
    {
        routePrefix = Model.AreaName + "/" + Model.ControllerRootName;
    }
    var modelProperties = new List<string>();
    foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.Scaffold)
        {
            modelProperties.Add(property.PropertyName);
        }
    }

    var bindString = "";
    if (isThisAComposedModel)
    {
        //Remove the first element from bind,(the first element supposed to be the model Primary key)
        var modelPropertiesList = modelProperties;
        modelPropertiesList.RemoveAt(0);
        bindString = string.Join(",", modelPropertiesList);
    }
    else
    {
        bindString = string.Join(",", modelProperties);
    }


    var contextTypeName = Model.ContextTypeName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var entitySetVar = Model.EntitySetVariable ??
        (String.IsNullOrEmpty(entitySetName)
            ? entitySetName
            : (entitySetName.Substring(0, length: 1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = Model.ModelVariable[0];
    var relatedProperties = new Dictionary<string, dynamic>();
    foreach (var nav in Model.ModelMetadata.Navigations)
    {
        relatedProperties.Add(nav.AssociationPropertyName, nav);

    }

    var inlineIncludes = "";
    foreach (var property in relatedProperties.Values)
    {
        inlineIncludes += string.Format("{0}                .Include({1} => {1}.{2})", Environment.NewLine, lambdaVar, property.AssociationPropertyName);
    }
    #endregion

    #region Preparing api attributes and its params
    List<(PropertyInfo[] props, dynamic attribute)> apiAttributes = GetModelClassCustomAttributesListProperties("AspAdminTemplate.Attributes.APIAttribute");

    ApiAttribute isGet= new ApiAttribute(false,-1,"","");
    ApiAttribute isList= new ApiAttribute(false,-1,"","");
    ApiAttribute isPaginated= new ApiAttribute(false,-1,"","");
    ApiAttribute isPost= new ApiAttribute(false,-1,"","");
    ApiAttribute isDelete= new ApiAttribute(false,-1,"","");
    ApiAttribute isPatch= new ApiAttribute(false,-1,"","");
    ApiAttribute isPut= new ApiAttribute(false,-1,"","");

    for (int i = 0; i < apiAttributes.Count; i++)
    {
        string apiFlag =  apiAttributes[i].props.FirstOrDefault(x => x.Name == "ApiFlag").GetValue(apiAttributes[i].attribute).ToString();
        string apiBaseUrl = apiAttributes[i].props.FirstOrDefault(x => x.Name == "BaseUrl").GetValue(apiAttributes[i].attribute);
        string apiEndPoint = apiAttributes[i].props.FirstOrDefault(x => x.Name == "Endpoint").GetValue(apiAttributes[i].attribute);

        if (apiFlag.Contains("Get"))
        {
            isGet.IsExist = true;
            isGet.Index = i;
            isGet.BaseUrl = apiBaseUrl;
            isGet.EndPoint = apiEndPoint;
        }

        if (apiFlag.Contains("List"))
        {
            isList.IsExist = true;
            isList.Index = i;
            isList.BaseUrl = apiBaseUrl;
            isList.EndPoint = apiEndPoint;
        }

        if (apiFlag.Contains("Paginated"))
        {
            isPaginated.IsExist = true;
            isPaginated.Index = i;
            isPaginated.BaseUrl = apiBaseUrl;
            isPaginated.EndPoint = apiEndPoint;
        }

        if (apiFlag.Contains("Post"))
        {
            isPost.IsExist = true;
            isPost.Index = i;
            isPost.BaseUrl = apiBaseUrl;
            isPost.EndPoint = apiEndPoint;
        }

        if (apiFlag.Contains("Delete"))
        {
            isDelete.IsExist = true;
            isDelete.Index = i;
            isDelete.BaseUrl = apiBaseUrl;
            isDelete.EndPoint = apiEndPoint;
        }

        if (apiFlag.Contains("Patch"))
        {
            isPatch.IsExist = true;
            isPatch.Index = i;
            isPatch.BaseUrl = apiBaseUrl;
            isPatch.EndPoint = apiEndPoint;
        }

        if (apiFlag.Contains("Put"))
        {
            isPut.IsExist = true;
            isPut.Index = i;
            isPut.BaseUrl = apiBaseUrl;
            isPut.EndPoint = apiEndPoint;
        }
    }

    bool isThereAtLeastOneAPiCall = isGet.IsExist || isList.IsExist || isPaginated.IsExist || isPost.IsExist || isDelete.IsExist || isPatch.IsExist || isPut.IsExist;
    #endregion
}

@{
    RenderNameSpaces(isThereAtLeastOneAPiCall);
    RenderOpenNameSpace();
    RenderAreaAttribute();
    RenderControllerClass(entitySetName, primaryKeyName, relatedProperties, lambdaVar, entitySetVar,primaryKeyNullableTypeName,routePrefix,inlineIncludes,isThisAComposedModel,bindString,primaryKeyType,primaryKeyShortTypeName
        ,apiAttributes,isGet,isList,isPaginated,isPost,isDelete,isPatch,isPut,isThereAtLeastOneAPiCall);
    RenderCloseNameSpace();
}                            
                             
@functions{                  
    #region main functions
    void RenderNameSpaces(bool isThereAtLeastOneAPiCall)
    {
        //Default Name spaces
        <text>
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Threading.Tasks;
            using Microsoft.AspNetCore.Mvc;
            using Microsoft.AspNetCore.Mvc.Rendering;
            using Microsoft.EntityFrameworkCore;
            using X.PagedList;
        </text>

        if (isThereAtLeastOneAPiCall)
        {
            <text>
                using System.Net.Http;
                using Newtonsoft.Json;
                using System.Net;
                using AspAdminTemplate.Services.ApiServices;
                using AspAdminTemplate.Models;
            </text>
        }

        //add all the required name spaces that we didn't already addedd.
        foreach (var namespaceName in Model.RequiredNamespaces)
        {
            @:using @namespaceName;
        }
    }

    void RenderOpenNameSpace()
    {
        <text>
            namespace @Model.ControllerNamespace
            {
        </text>
    }

    void RenderAreaAttribute()
    {
        if (!string.IsNullOrEmpty(Model.AreaName))
        {
            @:@string.Format("[Area(\"{0}\")]", Model.AreaName)
        }
    }

    void RenderControllerClass(dynamic entitySetName, dynamic primaryKeyName, Dictionary<string, dynamic> relatedProperties, dynamic lambdaVar, dynamic entitySetVar,dynamic primaryKeyNullableTypeName,string routePrefix,string inlineIncludes,bool isThisAComposedModel,string bindString,dynamic primaryKeyType,dynamic primaryKeyShortTypeName
            ,List<(PropertyInfo[] props, dynamic attribute)> apiAttributes,ApiAttribute isGet,ApiAttribute isList,ApiAttribute isPaginated,ApiAttribute isPost,ApiAttribute isDelete,ApiAttribute isPatch,ApiAttribute isPut,bool isThereAtLeastOneAPiCall)
    {

        RenderControllerClassHeader(isThereAtLeastOneAPiCall);

        DefaultSortAttribute defaultSort = GetDefaultSort();
        if (isList.IsExist)
        {
            RenderIndexApiFunction(entitySetName, primaryKeyName, relatedProperties, lambdaVar, entitySetVar,routePrefix,defaultSort
                ,isList);
        }
        else if(isPaginated.IsExist)
        {
            RenderIndexPaginatedApiFunction(entitySetName, primaryKeyName, relatedProperties, lambdaVar, entitySetVar,routePrefix,defaultSort
                ,isPaginated);
        }
        else
        {
            RenderIndexFunction(entitySetName, primaryKeyName, relatedProperties, lambdaVar, entitySetVar,routePrefix,defaultSort);
        }

        if (!isGet.IsExist)
        {
            RenderDetailsFunction(entitySetName, inlineIncludes, primaryKeyName, primaryKeyNullableTypeName, routePrefix);
        }
        else
        {
            RenderDetailsApiFunction(entitySetName, primaryKeyName, primaryKeyNullableTypeName, routePrefix
                ,isGet);
        }

        if (!isPost.IsExist)
        {
            RenderCreateViewFunction(routePrefix,isThisAComposedModel,relatedProperties);
            RenderCreateFunction(routePrefix,bindString,primaryKeyType,primaryKeyName,isThisAComposedModel,relatedProperties);
        }
        else
        {
            //Todo update this to work with api
            RenderCreateViewFunction(routePrefix,isThisAComposedModel,relatedProperties);
            RenderCreateApiFunction(routePrefix,bindString,primaryKeyType,primaryKeyName,isThisAComposedModel,relatedProperties,isPost);
        }


        if (!isPatch.IsExist && !isPut.IsExist)
        {
            RenderEditViewFunction(routePrefix,primaryKeyNullableTypeName,entitySetName,relatedProperties);
            RenderEditFunction(routePrefix,primaryKeyShortTypeName,bindString,primaryKeyName,relatedProperties);
        }
        else if(isPut.IsExist){
            RenderEditViewAPIFunction(routePrefix,primaryKeyNullableTypeName,entitySetName,relatedProperties, primaryKeyName ,isGet);
            RenderEditAPIFunction(routePrefix,primaryKeyShortTypeName,bindString,primaryKeyType,primaryKeyName,isThisAComposedModel,relatedProperties,isPut);
        }

        if (!isDelete.IsExist)
        {
            RenderDeleteViewFunction(routePrefix,primaryKeyNullableTypeName,entitySetName,inlineIncludes,primaryKeyName);
            RenderDeleteFunction(routePrefix,primaryKeyShortTypeName,entitySetName);
        }
        else
        {
            RenderDeleteViewApiFunction(routePrefix,primaryKeyNullableTypeName,entitySetName,inlineIncludes,primaryKeyName
                ,isDelete);
            RenderDeleteApiFunction(routePrefix,primaryKeyShortTypeName,entitySetName
                ,isDelete);
        }

        RenderOtherFunction(primaryKeyShortTypeName,entitySetName,primaryKeyName);

        RenderControllerClassFooter();
    }

    void RenderCloseNameSpace()
    {
        <text>
            }
        </text>
    }
    #endregion
}

@functions{
    #region Class Functions
    void RenderControllerClassHeader(bool isThereAtLeastOneAPiCall)
    {
        <text>
            public class @Model.ControllerName : Controller
            {
                private readonly @Model.ContextTypeName _context;
                @if (isThereAtLeastOneAPiCall) { 
                    @:private readonly GenericApiService _genericApiService;
                    @:
                    @:public @(Model.ControllerName)(@Model.ContextTypeName context, GenericApiService genericApiService)
                }else{
                    @:public @(Model.ControllerName)(@Model.ContextTypeName context)
                }

                {
                    _context = context;
                    @if (isThereAtLeastOneAPiCall) {
                        @:_genericApiService = genericApiService;
                    }
                }
        </text>
    }

    void RenderIndexFunction(dynamic entitySetName, dynamic primaryKeyName, Dictionary<string, dynamic> relatedProperties, dynamic lambdaVar, dynamic entitySetVar,string routePrefix,DefaultSortAttribute defaultSort)
    {
        List<PropertyInfo> searchableProps = GetPropsByAttribute("AspAdminTemplate.Attributes.SearchableAttribute");

        @:// GET: @routePrefix
        RenderIndexHeader(searchableProps.Count());

        RenderViewBagsInitBlock();

        RenderSelectBlock(entitySetName);

        if (searchableProps.Count() > 0)
        {
            RenderSearchBlock(searchableProps, entitySetName);
        }

        RenderSortSwitchBlock(entitySetName, primaryKeyName,defaultSort,false);

        RenderIndexReturn(entitySetName, primaryKeyName,relatedProperties,lambdaVar,entitySetVar);

        RenderIndexFooter();
    }

    void RenderDetailsFunction(dynamic entitySetName,string inlineIncludes,dynamic primaryKeyName,dynamic primaryKeyNullableTypeName,string routePrefix)
    {
        List<PropertyInfo> composedProps = GetPropsByAttribute("AspAdminTemplate.Attributes.CompositionAttribute");

        @:// GET: @routePrefix/Details/5
        RenderDetailsHeader(composedProps,primaryKeyNullableTypeName);
        @:ViewBag.returnUrl = Request.Headers["Referer"].ToString();
        RenderCheckIdBlock();

        RenderGetDetailBlock(entitySetName,inlineIncludes,primaryKeyName);

        RenderTupleViewOrNormalViewReturn(composedProps);

        RenderDetailsFooter();
    }

    void RenderCreateViewFunction(string routePrefix,bool isThisAComposedModel,Dictionary<string, dynamic> relatedProperties)
    {
        RenderCreateViewHeader(routePrefix,isThisAComposedModel);
        @:ViewBag.returnUrl = Request.Headers["Referer"].ToString();

        string attributeName = "AspAdminTemplate.Attributes.ForeignKeyDisplayAsAttribute";
        List<PropertyInfo> attributeProps = GetPropsByAttribute(attributeName);
        if (attributeProps.Count > 0)
        {
            RenderForeignKeyDisplayAsAttributeViewData(attributeName,attributeProps,relatedProperties);
        }
        else
        {
            RenderCreateViewViewData(relatedProperties);
        }

        RenderCreateViewFooter();
    }

    void RenderCreateFunction(string routePrefix,string bindString,dynamic primaryKeyType,dynamic primaryKeyName,bool isThisAComposedModel,Dictionary<string, dynamic> relatedProperties)
    {
        RenderCreateHeader(routePrefix,bindString);
        <text>
                if (ModelState.IsValid)
                {
        </text>
        if (!string.IsNullOrEmpty(primaryKeyType) && IsGuid(primaryKeyType))
        {
            @:@(Model.ModelVariable).@primaryKeyName = Guid.NewGuid();
        }
        @:_context.Add(@Model.ModelVariable);
        @:await _context.SaveChangesAsync();

        //Render the composable version of the create function (using the parent id)
        if (isThisAComposedModel)
        {
            foreach (var property in relatedProperties.Values)
            {
                @:TempData["Id"] = @(Model.ModelVariable).@(property.ForeignKeyPropertyNames[0]);
                @:return RedirectToAction("Details","@(property.EntitySetName)s");
            }
        }
        else
        {
            @:return Redirect(returnUrl);
        }

        @:}

        foreach (var property in relatedProperties.Values)
        {
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);

        }

        RenderCreateFooter();
    }

    void RenderEditViewFunction(string routePrefix, dynamic primaryKeyNullableTypeName,dynamic entitySetName,Dictionary<string, dynamic> relatedProperties)
    {
        RenderEditViewHeader(routePrefix,primaryKeyNullableTypeName);
    
        @:ViewBag.returnUrl = Request.Headers["Referer"].ToString();
        <text>
            if (id == null)
            {
                return NotFound();
            }

            var @Model.ModelVariable = await _context.@(entitySetName).FindAsync(id);
            if (@Model.ModelVariable == null)
            {
                return NotFound();
            }
        </text>

        foreach (var property in relatedProperties.Values)
        {
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
        }

        RenderEditViewFooter();
    }

    void RenderEditFunction(string routePrefix,dynamic primaryKeyShortTypeName,string bindString,dynamic primaryKeyName,Dictionary<string, dynamic> relatedProperties)
    {
        RenderEditHeader(routePrefix,primaryKeyShortTypeName,bindString);

        <text>
            if (id != @Model.ModelVariable.@primaryKeyName)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(@Model.ModelVariable);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!@(Model.ModelTypeName)Exists(@Model.ModelVariable.@primaryKeyName))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return Redirect(returnUrl);
            }
        </text>

        foreach (var property in relatedProperties.Values)
        {
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
        }

        RenderEditFooter();
    }

    void RenderDeleteViewFunction(string routePrefix,dynamic primaryKeyNullableTypeName,dynamic entitySetName,string inlineIncludes,dynamic primaryKeyName)
    {
        RenderDeleteViewHeader(routePrefix,primaryKeyNullableTypeName);

        @:ViewBag.returnUrl = Request.Headers["Referer"].ToString();
        <text>
            if (id == null)
            {
            return NotFound();
            }

            var @Model.ModelVariable = await _context.@(entitySetName)@inlineIncludes
            .FirstOrDefaultAsync(m => m.@primaryKeyName == id);
            if (@Model.ModelVariable == null)
            {
            return NotFound();
            }
        </text>

        RenderDeleteViewFooter();
    }

    void RenderDeleteFunction(string routePrefix,dynamic primaryKeyShortTypeName,dynamic entitySetName)
    {
        RenderDeleteHeader(routePrefix,primaryKeyShortTypeName);

        <text>
            var @Model.ModelVariable = await _context.@(entitySetName).FindAsync(id);
            _context.@(entitySetName).Remove(@Model.ModelVariable);
            await _context.SaveChangesAsync();
        </text>

        RenderDeleteFooter();
    }

    void RenderOtherFunction(dynamic primaryKeyShortTypeName,dynamic entitySetName,dynamic primaryKeyName)
    {
        <text>
            private bool @(Model.ModelTypeName)Exists(@primaryKeyShortTypeName id)
            {
                return _context.@(entitySetName).Any(e => e.@primaryKeyName == id);
            }
        </text>
    }

    void RenderControllerClassFooter()
    {
        <text>
            }
        </text>
    }
    #endregion

    #region API Functions

    void RenderIndexApiFunction(dynamic entitySetName, dynamic primaryKeyName, Dictionary<string, dynamic> relatedProperties, dynamic lambdaVar, dynamic entitySetVar,string routePrefix,DefaultSortAttribute defaultSort
        ,ApiAttribute isList)
    {
        List<PropertyInfo> searchableProps = GetPropsByAttribute("AspAdminTemplate.Attributes.SearchableAttribute");

        @:// GET: @routePrefix
        RenderIndexHeader(searchableProps.Count());

        RenderViewBagsInitBlock();

        RenderApiSelectBlock(entitySetName,isList);

        if (searchableProps.Count() > 0)
        {
            RenderSearchBlock(searchableProps, entitySetName);
        }

        RenderSortSwitchBlock(entitySetName, primaryKeyName,defaultSort,true);

        RenderIndexReturn(entitySetName, primaryKeyName,relatedProperties,lambdaVar,entitySetVar);

        RenderIndexFooter();
    }

    void RenderIndexPaginatedApiFunction(dynamic entitySetName, dynamic primaryKeyName, Dictionary<string, dynamic> relatedProperties, dynamic lambdaVar, dynamic entitySetVar,string routePrefix,DefaultSortAttribute defaultSort
        ,ApiAttribute isPaginated)
    {
        List<PropertyInfo> searchableProps = GetPropsByAttribute("AspAdminTemplate.Attributes.SearchableAttribute");

        @:// GET: @routePrefix
        RenderIndexHeader(searchableProps.Count());

        RenderViewBagsInitBlock();

        RenderPaginatedApiSelectBlock(entitySetName,isPaginated);

        if (searchableProps.Count() > 0)
        {
            RenderSearchBlock(searchableProps, entitySetName);
        }

        //RenderSortSwitchBlock(entitySetName, primaryKeyName,defaultSort,true);

        RenderPaginatedApiIndexReturn(entitySetName, primaryKeyName,relatedProperties,lambdaVar,entitySetVar);

        RenderIndexFooter();
    }

    void RenderDetailsApiFunction(dynamic entitySetName,dynamic primaryKeyName,dynamic primaryKeyNullableTypeName,string routePrefix
        ,ApiAttribute isGet)
    {
        List<PropertyInfo> composedProps = GetPropsByAttribute("AspAdminTemplate.Attributes.CompositionAttribute");

        @:// GET: @routePrefix/Details/5
        RenderDetailsHeader(composedProps,primaryKeyNullableTypeName);

        @:ViewBag.returnUrl = Request.Headers["Referer"].ToString();

        RenderCheckIdBlock();

        RenderGetApiDetailBlock(entitySetName,primaryKeyName,isGet);

        RenderTupleViewOrNormalViewReturn(composedProps,true);

        RenderDetailsFooter();
    }

    void RenderCreateApiFunction(string routePrefix, string bindString, dynamic primaryKeyType, dynamic primaryKeyName, bool isThisAComposedModel, Dictionary<string, dynamic> relatedProperties,ApiAttribute isPost)
    {
        RenderCreateHeader(routePrefix,bindString);
        <text>
                if (ModelState.IsValid)
                {
        </text>

        @:_genericApiService.SetBaseUrl("@(isPost.BaseUrl)");
        @:await _genericApiService.ApiPost< @(Model.ModelTypeName)>($"@(isPost.EndPoint)",@Model.ModelVariable);

        //Render the composable version of the create function (using the parent id)
        if (isThisAComposedModel)
        {
            //TODO change this to work with api
            foreach (var property in relatedProperties.Values)
            {
                @:TempData["Id"] = @(Model.ModelVariable).@(property.ForeignKeyPropertyNames[0]);
                @:return RedirectToAction("Details","@(property.EntitySetName)s");
            }
        }
        else
        {
            @:return Redirect(returnUrl);
        }

        @:}

        //Todo change this to work with api
        foreach (var property in relatedProperties.Values)
        {
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);

        }

        RenderCreateFooter();
    }
    
    void RenderEditViewAPIFunction(string routePrefix, dynamic primaryKeyNullableTypeName,dynamic entitySetName,Dictionary<string, dynamic> relatedProperties,dynamic primaryKeyName
        ,ApiAttribute isGet)
    {
        RenderEditViewHeader(routePrefix,primaryKeyNullableTypeName);
    
        @:ViewBag.returnUrl = Request.Headers["Referer"].ToString();

        <text>
            if (id == null)
            {
                return NotFound();
            }
        </text>

        RenderGetApiDetailBlock(entitySetName,primaryKeyName,isGet);

        RenderEditViewFooter();
    }

    void RenderEditAPIFunction(string routePrefix,dynamic primaryKeyShortTypeName, string bindString, dynamic primaryKeyType, dynamic primaryKeyName, bool isThisAComposedModel, Dictionary<string, dynamic> relatedProperties,ApiAttribute isPut)
    {
        RenderEditHeader(routePrefix,primaryKeyShortTypeName,bindString);
        <text>
            if (ModelState.IsValid)
            {
        </text>

        @:_genericApiService.SetBaseUrl("@(isPut.BaseUrl)");
        @:await _genericApiService.ApiPut< @(Model.ModelTypeName)>($"@(isPut.EndPoint)",@Model.ModelVariable);
        @:return Redirect(returnUrl);
        @:}

        RenderEditFooter();

    }

    void RenderDeleteViewApiFunction(string routePrefix, dynamic primaryKeyNullableTypeName, dynamic entitySetName, string inlineIncludes, dynamic primaryKeyName
        , ApiAttribute isDelete)
    {
        RenderDeleteViewHeader(routePrefix, primaryKeyNullableTypeName);

        @:ViewBag.returnUrl = Request.Headers["Referer"].ToString();

        <text>
            if (id == null)
            {
            return NotFound();
            }
        </text>
        RenderGetApiDetailBlock(entitySetName, primaryKeyName, isDelete);

        RenderDeleteViewFooter();
    }

    void RenderDeleteApiFunction(string routePrefix, dynamic primaryKeyShortTypeName, dynamic entitySetName
        , ApiAttribute isDelete)
    {
        RenderDeleteHeader(routePrefix, primaryKeyShortTypeName);

        <text>
            _genericApiService.SetBaseUrl("@(isDelete.BaseUrl)");
            await _genericApiService.ApiDelete($"@(isDelete.EndPoint)");
        </text>

        RenderDeleteFooter();
    }
    #endregion
}


@functions{
    #region Index Functions

    /// <summary>
    /// Render the Index header depending on the searchable Props
    /// </summary>
    /// <param name="searchablePropsCount">the number of the props that has a searchable attribute</param>
    void RenderIndexHeader(int searchablePropsCount)
    {
        if (searchablePropsCount > 0)
        {
            <text>
                public async Task<IActionResult> Index(string sortOrder, string currentFilter, string searchString, int? page)
                {
            </text>
        }
        else
        {
            <text>
                public async Task<IActionResult> Index(string sortOrder, string currentFilter, int ? page)
                {
            </text>
        }
    }

    void RenderViewBagsInitBlock()
    {
        @:ViewBag.CurrentSort = sortOrder;
        foreach (var property in Model.ModelMetadata.Properties)
        {
            @:ViewBag.@(property.PropertyName)SortParm = String.IsNullOrEmpty(sortOrder) ? "@(property.PropertyName.ToLower())_desc" : "";
        }
    }

    void RenderSelectBlock(dynamic entitySetName)
    {
        <text>
            int pageSize = 8;
            int pageNumber = (page ?? 1);
            
            var @(entitySetName.ToLower()) = from x in _context.@(entitySetName) select x;

        </text>
    }

    void RenderSearchBlock(List<PropertyInfo> props, dynamic entitySetName)
    {
        <text>
            if (searchString != null)
            {
            page = 1;
            }
            else
            {
            searchString = currentFilter;
            }

            ViewBag.CurrentFilter = searchString;

            if(!String.IsNullOrEmpty(searchString))
            {
            @(entitySetName.ToLower()) = @(entitySetName.ToLower()).Where(x=>
        </text>
        for (int i = 0; i < props.Count(); i++)
        {
            string searchableString = props[i].Name;
            if (props[i].PropertyType != typeof(string))
            {
                searchableString += ".ToString()";
            }
            if (GetAttributeValue(props[i], "AspAdminTemplate.Attributes.SearchableAttribute", "SearchTypeValue") == "Like")
            {
                searchableString += ".Contains(searchString)";
            }
            else
            {
                searchableString += " == searchString";
            }

            if (i + 1 != props.Count())
            {
                searchableString += " || ";
            }
            @:x.@searchableString
        }
        <text>
            );
            }

        </text>
    }

    void RenderSortSwitchBlock(dynamic entitySetName, dynamic primaryKeyName,DefaultSortAttribute defaultSort,bool convertResulToList)
    {
        @:@(entitySetName.ToLower()) = sortOrder switch
        @:{

        foreach (var property in Model.ModelMetadata.Properties)
        {
            @:"@(property.PropertyName.ToLower())_desc"=>  @(entitySetName.ToLower()).OrderByDescending(x => x.@(property.PropertyName))@(GetDotToListString(convertResulToList)),
        }

        if (defaultSort.IsExist) {
            @:_ => @(entitySetName.ToLower()).@(GetOrderByString(defaultSort.IsAsc))(x => x.@(defaultSort.PropName))@(GetDotToListString(convertResulToList)),
        }
        else { 
            @:_ => @(entitySetName.ToLower()).@(GetOrderByString(defaultSort.IsAsc))(x => x.@primaryKeyName)@(GetDotToListString(convertResulToList)),
        }

        @:};
        @:
    }

    void RenderIndexReturn(dynamic entitySetName, dynamic primaryKeyName, Dictionary<string, dynamic> relatedProperties, dynamic lambdaVar, dynamic entitySetVar)
    {
        var includeExpressions = "";
        includeExpressions = String.Join("", relatedProperties
        .Values
        .Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.AssociationPropertyName)));
        if (!String.IsNullOrEmpty(includeExpressions))
        {
            @:var @entitySetVar = @(entitySetName.ToLower())@includeExpressions;
            @:var result = await @(entitySetVar).ToListAsync();
            @:return View(result.ToPagedList(pageNumber, pageSize));
        }
        else
        {
            @:var result = await @(entitySetName.ToLower()).ToListAsync();
            @:return View(result.ToPagedList(pageNumber, pageSize));
        }
    }

    void RenderIndexFooter()
    {
        <text>
            }
        </text>
    }
    #endregion
}

@functions{
    #region API Index Functions
    void RenderApiSelectBlock(dynamic entitySetName, ApiAttribute isList)
    {
        <text>
            int pageSize = 8;
            int pageNumber = (page ?? 1);        

            _genericApiService.SetBaseUrl("@(isList.BaseUrl)");
            List@($"<{entitySetName}> {entitySetName.ToLower()}") = await _genericApiService.ApiGet@($"<List<{entitySetName}>>")($"@(isList.EndPoint)");

        </text>
    }

    void RenderPaginatedApiSelectBlock(dynamic entitySetName, ApiAttribute isPaginated)
    {
        <text>
            int pageSize = 8;
            int pageNumber = (page ?? 1);        

            _genericApiService.SetBaseUrl("@(isPaginated.BaseUrl)");
            PaginatedListWrapper@($"<{entitySetName}> {entitySetName.ToLower()}") = await _genericApiService.ApiGet@($"<PaginatedListWrapper<{entitySetName}>>")($"@(isPaginated.EndPoint)");

        </text>
    }

    void RenderPaginatedApiIndexReturn(dynamic entitySetName, dynamic primaryKeyName, Dictionary<string, dynamic> relatedProperties, dynamic lambdaVar, dynamic entitySetVar)
    {
        @:var result = new StaticPagedList<@(entitySetName)>(@(entitySetName.ToLower()).PaginatedList, pageNumber, pageSize, int.Parse(@(entitySetName.ToLower()).ResultsCount));
		@:ViewBag.OnePageOfUsers = result;
        @:
        @:return View(result);
    }

    #endregion    
}

@functions{
    #region Details Functions

    void RenderDetailsHeader(List<PropertyInfo> composedProps,dynamic primaryKeyNullableTypeName)
    {
        if (composedProps.Count > 0)
        {
            string header = $"public async Task<IActionResult> Details({primaryKeyNullableTypeName} id, ";
            for (int i = 0; i < composedProps.Count(); i++)
            {
                var composition = GetAttributesPropsOfProperty(composedProps[i], "AspAdminTemplate.Attributes.CompositionAttribute");
                string composionForeignKeyValue = composition == null ? "null" : composition.Value.props.First(x => x.Name == "ForeignKey").GetValue(composition.Value.attribute);
                string composedPropsName = composedProps[i].PropertyType.GetGenericArguments()[0].Name;
                string composedPropsNameFirstLetterLowerCase = composedPropsName[0].ToString().ToLower() + composedPropsName.Substring(1);

                header += $"int? {composedPropsNameFirstLetterLowerCase}Page";
                if (i + 1 != composedProps.Count())
                {
                    header += ",";
                }
            }
            header += ")";

            @:@header
            @:{
        }
        else
        {
            <text>
                public async Task<IActionResult> Details(@primaryKeyNullableTypeName id)
                {
            </text>
        }
    }

    void RenderCheckIdBlock()
    {
        <text>
            if (id == null)
            {
                if (TempData["Id"] != null)
                {
                    id = int.Parse(TempData["Id"].ToString());
                }
                else
                {
                    return NotFound();
                }
            }
        </text>
    }

    void RenderGetDetailBlock(dynamic entitySetName,dynamic inlineIncludes,dynamic primaryKeyName)
    {
        <text>
            var @Model.ModelVariable = await _context.@(entitySetName)@inlineIncludes
            .FirstOrDefaultAsync(m => m.@primaryKeyName == id);
            if (@Model.ModelVariable == null)
            {
                return NotFound();
            }
        </text>
    }

    void RenderTupleViewOrNormalViewReturn(List<PropertyInfo> composedProps,bool isApi=false)
    {
        if (composedProps.Count > 0)
        {
            string tupleVarString = "var tuple = new Tuple<" + Model.ModelTypeName + ",";
            string tupleVarSecondHalfString = ">(" + Model.ModelVariable + ",";
            for (int i = 0; i < composedProps.Count(); i++)
            {
                var composition = GetAttributesPropsOfProperty(composedProps[i], "AspAdminTemplate.Attributes.CompositionAttribute");
                string composionForeignKeyValue = composition == null ? "null" : composition.Value.props.First(x => x.Name == "ForeignKey").GetValue(composition.Value.attribute);
                string composedPropsName = composedProps[i].PropertyType.GetGenericArguments()[0].Name;
                string composedPropsNameFirstLetterLowerCase = composedPropsName[0].ToString().ToLower() + composedPropsName.Substring(1);
                string composedPropsValueString = "";
                string baseUrl = "";
                string endpoint = "";
                bool isPaginated = false;
                if (isApi)
                {
                    baseUrl = composition == null ? "null" : composition.Value.props.FirstOrDefault(x => x.Name == "BaseUrl").GetValue(composition.Value.attribute);
                    endpoint = composition == null ? "null" : composition.Value.props.FirstOrDefault(x => x.Name == "Endpoint").GetValue(composition.Value.attribute);
                    isPaginated =  composition == null ? "null" : composition.Value.props.FirstOrDefault(x => x.Name == "IsPaginated").GetValue(composition.Value.attribute);
                    //TODO add set base url method
                    if (isPaginated)
                    {
                        composedPropsValueString = "PaginatedListWrapper<"+composedPropsName+"> " + Model.ModelVariable + composedPropsName + " = await _genericApiService.ApiGet<PaginatedListWrapper<"+composedPropsName+">>($\""+endpoint+"\");";
                    }
                    else
                    {
                        composedPropsValueString = "var " + Model.ModelVariable + composedPropsName + " = await _genericApiService.ApiGet<List<"+composedPropsName+">>($\""+endpoint+"\");";
                    }
                }
                else
                {
                    composedPropsValueString = "var " + Model.ModelVariable + composedPropsName + " = await _context." + composedPropsName + ".Where(x => x." + composionForeignKeyValue + " == id).ToListAsync();";
                }

                //render the block that get the composed prop data
                @:int @(composedPropsNameFirstLetterLowerCase)PageSize = 8;
                @:int @(composedPropsNameFirstLetterLowerCase)PageNumber = (@(composedPropsNameFirstLetterLowerCase)Page ?? 1);
                @:@composedPropsValueString
                if(isApi && isPaginated) { 
                    @:var @(Model.ModelVariable + composedPropsName)Result = new StaticPagedList<@(composedPropsName)>(@(Model.ModelVariable + composedPropsName).PaginatedList, @(composedPropsNameFirstLetterLowerCase)PageNumber, @(composedPropsNameFirstLetterLowerCase)PageSize, int.Parse(@(Model.ModelVariable + composedPropsName).ResultsCount));
                }
                @:

                //Prepare the first half of the tuple string
                tupleVarString += GetIPagedListTypeExpression(composedProps[i].PropertyType.GetGenericArguments()[0].FullName);
                if (i + 1 != composedProps.Count())
                {
                    tupleVarString += " , ";
                }

                //Prepare the second half of the tuple string
                if(isApi && isPaginated)
                {
                    tupleVarSecondHalfString += Model.ModelVariable + composedPropsName + "Result";
                }
                else
                {
                    tupleVarSecondHalfString += Model.ModelVariable + composedPropsName + $".ToPagedList({composedPropsNameFirstLetterLowerCase}PageNumber, {composedPropsNameFirstLetterLowerCase}PageSize)";
                }
                if (i + 1 != composedProps.Count())
                {
                    tupleVarSecondHalfString += " , ";
                }
            }

            tupleVarString += tupleVarSecondHalfString +  ");";

            @:@tupleVarString
            @:return View(tuple);
        }
        else
        {
            @:return View(@Model.ModelVariable);
        }

    }

    void RenderDetailsFooter()
    {
        @:}
    }

    #endregion
}

@functions{
    #region Details API Functions
    void RenderGetApiDetailBlock(dynamic entitySetName,dynamic primaryKeyName,ApiAttribute isGet)
    {
        <text>
            _genericApiService.SetBaseUrl("@(isGet.BaseUrl)");
            var @Model.ModelVariable = await _genericApiService.ApiGet@($"<{entitySetName}>")($"@(isGet.EndPoint)");
            if (@Model.ModelVariable == null)
            {
                return NotFound();
            }
        </text>
    }
    #endregion
}

@functions{
    #region Create View Functions

    void RenderCreateViewHeader(string routePrefix,bool isThisAComposedModel)
    {
        @:// GET: @routePrefix/Create
        if (isThisAComposedModel)
        {
            @:public IActionResult Create(int? id)
            @:{
        }
        else
        {
            @:public IActionResult Create()
            @:{
        }
    }

    void RenderForeignKeyDisplayAsAttributeViewData(string attributeName, List<PropertyInfo> attributeProps, Dictionary<string, dynamic> relatedProperties)
    {
        foreach (var property in relatedProperties.Values)
        {
            //find if this props has the "ForeignKeyDisplayAs" Attribute
            PropertyInfo prophasForeignKeyDisplayAsAttribute = attributeProps.Find(x => x.Name == property.ForeignKeyPropertyNames[0]);
            if (prophasForeignKeyDisplayAsAttribute != null)
            {
                var foreignKeyDisplayAsAttribute = prophasForeignKeyDisplayAsAttribute.GetCustomAttributes(true);
                foreach (var att in foreignKeyDisplayAsAttribute)
                {
                    if (att.ToString() == attributeName)
                    {
                        //list of props of the attribute ForeignKeyDisplayAsAttribute
                        List<PropertyInfo> foreignKeyDisplayAsAttributeProps = att.GetType().GetProperties().ToList();

                        string CrudFlagValue = foreignKeyDisplayAsAttributeProps.Find(x => x.Name == "CrudFlag").GetValue(att).ToString();
                        if (CrudFlagValue.Contains("Create") || CrudFlagValue.Contains("All"))
                        {
                            string customPropsNameValue = foreignKeyDisplayAsAttributeProps.Find(x => x.Name == "CustomPropsName").GetValue(att).ToString();
                            string stringFormaterValue = foreignKeyDisplayAsAttributeProps.Find(x => x.Name == "StringFormater").GetValue(att).ToString();

                            @:var @(property.EntitySetName)s = _context.@(property.EntitySetName).ToList();
                            @:for (int i = 0; i < @(property.EntitySetName)s.Count(); i++)
                            @:{
                            @:@(property.EntitySetName)s[i].@(customPropsNameValue) = $"@(stringFormaterValue.Replace("{", "{" + property.EntitySetName + "s[i]."))";
                            @:}
                            @:
                            @:var selectList = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@customPropsNameValue");
                            @:if (id != null)
                            @:{
                            @:var selected = selectList.Where(x => x.Value == id.ToString()).First();
                            @:selected.Selected = true;
                            @:}
                            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = selectList;
                            @:
                        }
                        else
                        {
                            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName");
                        }
                    }
                }

            }
            else
            {
                @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName");
            }
        }
    }

    void RenderCreateViewViewData(Dictionary<string, dynamic> relatedProperties)
    {
        foreach (var property in relatedProperties.Values)
        {
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName");
        }
    }

    void RenderCreateViewFooter()
    {
        <text>
                return View();
            }
        </text>
    }
    #endregion
}

@functions{
    #region Create Functions

    void RenderCreateHeader(string routePrefix,string bindString)
    {
        <text>
            // POST: @routePrefix/Create
            // To protect from overposting attacks, please enable the specific properties you want to bind to, for
            // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
            [HttpPost]
            [ValidateAntiForgeryToken]
            public async Task<IActionResult> Create([Bind("@bindString")] @Model.ModelTypeName @Model.ModelVariable, string returnUrl)
            {
        </text>
    }


    void RenderCreateFooter()
    {
        <text>
                return View(@Model.ModelVariable);
            }
        </text>
    }
    #endregion
}

@functions{
    #region Edit View Functions
    void RenderEditViewHeader(string routePrefix, dynamic primaryKeyNullableTypeName)
    {
        <text>
            // GET: @routePrefix/Edit/5
            public async Task<IActionResult> Edit(@primaryKeyNullableTypeName id)
            {
        </text>
    }

    void RenderEditViewFooter()
    {
        <text>
                return View(@Model.ModelVariable);
            }
        </text>
    }
    #endregion
}

@functions{
    #region Edit Functions
    void RenderEditHeader(string routePrefix,dynamic primaryKeyShortTypeName,string bindString) 
    { 
        <text>
            // POST: @routePrefix/Edit/5
            // To protect from overposting attacks, please enable the specific properties you want to bind to, for
            // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
            [HttpPost]
            [ValidateAntiForgeryToken]
            public async Task<IActionResult> Edit(@primaryKeyShortTypeName id, [Bind("@bindString")] @Model.ModelTypeName @Model.ModelVariable,string returnUrl)
            {
        </text>
    }

    void RenderEditFooter() 
    { 
        <text>
                return View(@Model.ModelVariable);
            }
        </text>
    }
    #endregion
}

@functions{
    #region Delete View Functions
    void RenderDeleteViewHeader(string routePrefix,dynamic primaryKeyNullableTypeName)
    {
        <text>
            // GET: @routePrefix/Delete/5
            public async Task<IActionResult> Delete(@primaryKeyNullableTypeName id)
            {
        </text>
    }

    void RenderDeleteViewFooter()
    {
        <text>
                return View(@Model.ModelVariable);
            }
        </text>
    }
    #endregion
}

@functions{
    #region Delete Functions
    void RenderDeleteHeader(string routePrefix,dynamic primaryKeyShortTypeName)
    {
        <text>
            // POST: @routePrefix/Delete/5
            [HttpPost, ActionName("Delete")]
            [ValidateAntiForgeryToken]
            public async Task<IActionResult> DeleteConfirmed(@primaryKeyShortTypeName id,string returnUrl)
            {
        </text>
    }

    void RenderDeleteFooter()
    {
        <text>
                return Redirect(returnUrl);
            }
        </text>
    }
    #endregion
}

@functions{
    #region API Related Types
    class ApiAttribute{
        public bool IsExist { get; set; }
        public int Index { get; set; }
        public string BaseUrl { get; set; }
        public string EndPoint { get; set; }

        public ApiAttribute(bool isExist,int index,string baseUrl,string endPoint)
        {
            IsExist = isExist;
            Index = index;
            BaseUrl = baseUrl;
            EndPoint = endPoint;
        }
    }
    #endregion

    #region API Related Function

    #endregion
}

@functions{
    #region default sort Types
    class DefaultSortAttribute{
        public bool IsExist { get; set; }
        public string PropName { get; set; }
        public bool IsAsc { get; set; }

        public DefaultSortAttribute(bool isExist,string propName,bool isAsc)
        {
            IsExist = isExist;
            PropName = propName;
            IsAsc = isAsc;
        }
    }
    #endregion

    #region default sort related Function
    DefaultSortAttribute GetDefaultSort()
    {
        DefaultSortAttribute defaultSort = new DefaultSortAttribute(false,"",true);

        (PropertyInfo prop,PropertyInfo[] attributeProps, dynamic attribute)? result = GetAttributeOfPropByNameAndGetItsProps("AspAdminTemplate.Attributes.DefaultSort");
        if (result != null)
        {
            defaultSort.IsExist = true;

            defaultSort.PropName = result.Value.prop.Name;

            string sortTypeString = result.Value.attributeProps.FirstOrDefault(x => x.Name == "SortType").GetValue(result.Value.attribute).toString();
            if (sortTypeString.Contains("Desc"))
            {
                defaultSort.IsAsc = false;
            }
        }

        return defaultSort;
    }

    string GetOrderByString(bool isAsc)
    {
        return isAsc ? "OrderBy" : "OrderByDescending";
    }
    #endregion
}

@functions
{
    // This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
    // sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (!Microsoft.VisualStudio.Web.CodeGeneration.Templating.TypeUtilities.IsNullable(primaryKeyType) || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName)
    {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }

    string GetDotToListString(bool returnListInsteadOfEmpty)
    {
        return returnListInsteadOfEmpty ? ".ToList()" : "";
    }
}

@functions{
    string GetIPagedListTypeExpression(string typeName)
    {
        return "X.PagedList.IPagedList<" + typeName + ">";
    }

    void GetCustomAttributesWithThierDataTest()
    {
        Type modelType = Model.ModelMetadata.ModelType;
        @:/*1)ModelType:*/ @Model.ModelMetadata.ModelType
        @:/*2)ModelType Name:*/ @modelType.Name
        //Returns all the public properties of the current Type.
        PropertyInfo[] props = modelType.GetProperties();
        @:/*props count:*/ @props.Count()
        foreach (PropertyInfo prop in props)
        {
            @:/*2.1)PropName:*/ @prop.Name | /*PropType:*/ @prop.PropertyType
            foreach (var att in prop.GetCustomAttributes(true))
            {
                @:/*2.1.1)AttributeType:*/ @att.ToString()
                @:/*2.1.2)Is this the searchable Attributes:*/ @(att.ToString() == "AspAdminTemplate.Attributes.SearchableAttribute")
                @:/*2.1.3)Attribute Type Name:*/ @att.GetType().Name




                if (att.ToString() == "AspAdminTemplate.Attributes.SearchableAttribute")
                {
                    PropertyInfo[] attProps = att.GetType().GetProperties();
                    foreach (PropertyInfo attProp in attProps)
                    {
                        @:/*2.1.4.1)Attribute Prop name:*/ @attProp.Name | /*Attribute prop type:*/ @attProp.PropertyType | /*Attribute prop Value:*/ @attProp.GetValue(att)
                    }
                }
            }
        }
    }

    (PropertyInfo prop,PropertyInfo[] attributeProps, dynamic attribute)? GetAttributeOfPropByNameAndGetItsProps(string attributeName)
    {
        List<PropertyInfo> resultProps = new List<PropertyInfo>();
        Type modelType = Model.ModelMetadata.ModelType;
        PropertyInfo[] props = modelType.GetProperties();
        //Loop props
        foreach (PropertyInfo prop in props)
        {
            //loop Props Attributes
            foreach (var att in prop.GetCustomAttributes(true))
            {
                //if this prop has the att that we are looking for.
                if (att.ToString() == attributeName)
                {
                    return (prop,att.GetType().GetProperties(), att);
                }
            }
        }

        return null;
    }

    List<PropertyInfo> GetPropsByAttribute(string attributeName)
    {
        List<PropertyInfo> resultProps = new List<PropertyInfo>();
        Type modelType = Model.ModelMetadata.ModelType;
        PropertyInfo[] props = modelType.GetProperties();
        //Loop props
        foreach (PropertyInfo prop in props)
        {
            //loop Props Attributes
            foreach (var att in prop.GetCustomAttributes(true))
            {
                //if this prop has the att that we are looking for.
                if (att.ToString() == attributeName)
                {
                    resultProps.Add(prop);
                }
            }
        }

        return resultProps;
    }

    string GetAttributeValue(PropertyInfo propertyThatHasTheAttribute, string attributeName, string propertyName)
    {
        //loop Props Attributes
        foreach (var att in propertyThatHasTheAttribute.GetCustomAttributes(true))
        {
            //if this prop has the att that we are looking for.
            if (att.ToString() == attributeName)
            {
                PropertyInfo[] attProps = att.GetType().GetProperties();
                foreach (PropertyInfo attProp in attProps)
                {
                    if (attProp.Name.ToString().Equals(propertyName))
                    {
                        return attProp.GetValue(att).ToString();
                    }
                }
            }
        }
        return "";
    }

    (PropertyInfo[] props, dynamic attribute)? GetModelClassCustomAttributesProperties(string attributeName)
    {
        Type modelType = Model.ModelMetadata.ModelType;
        foreach (var att in modelType.GetCustomAttributes(true))
        {
            if (att.ToString() == attributeName)
            {
                return (att.GetType().GetProperties(), att);
            }
        }

        return null;
    }

    List<(PropertyInfo[] props, dynamic attribute)> GetModelClassCustomAttributesListProperties(string attributeName)
    {
        List<(PropertyInfo[] props, dynamic attribute)> list = new List<(PropertyInfo[] props, dynamic attribute)>();
        Type modelType = Model.ModelMetadata.ModelType;
        foreach (var att in modelType.GetCustomAttributes(true))
        {
            if (att.ToString() == attributeName)
            {
                list.Add((att.GetType().GetProperties(), att));
            }
        }

        return list;
    }

    (PropertyInfo[] props, dynamic attribute)? GetAttributesPropsOfProperty(PropertyInfo prop, string attributeName)
    {
        foreach (var att in prop.GetCustomAttributes(true))
        {
            if (att.ToString() == attributeName)
            {
                return (att.GetType().GetProperties(), att);
            }
        }

        return null;
    }

    bool IsThisClassHasAttribute(string attributeName)
    {
        Type modelType = Model.ModelMetadata.ModelType;
        foreach (var att in modelType.GetCustomAttributes(true))
        {
            if (att.ToString() == attributeName)
            {
                return true;
            }
        }

        return false;
    }
}
