@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@using System.Reflection;
@@model @Model.ViewDataTypeName

@{

    List<PropertyInfo> propsThatShouldBeDisplayedAsImages = GetPropsByAttribute("AspAdminTemplate.Attributes.DisplayAsImageAttribute");
    if (propsThatShouldBeDisplayedAsImages.Count>0)
    {
        <text>
            @@using AspAdminTemplate.Extenstions;
            @@using AspAdminTemplate.Attributes.Enums;
        </text>
    }

    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
        @:@@{
        @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
            @:Layout = "@Model.LayoutPageFile";
        }
        @:}
        @:
        @:<section class="section">
            @:<div class="section-header">
                @:<h1>@Model.ViewName</h1>
            @:</div>
            @:
        }
        else
        {
            @:@@{
            @:Layout = null;
            @:}
            @:
            @:<!DOCTYPE html>
            @:
            @:<html>
            @:<head>
                @:<meta name="viewport" content="width=device-width" />
                @:<title>@Model.ViewName</title>
            @:</head>
            @:<body>
                @:
                //    PushIndent("    ");
            }
}
<div class="section-body">
    <div>

        <h2 class="section-title">@Model.ViewDataTypeShortName</h2>
        <hr />
        <div class="card">
            <div class="card-header card-relative">
                <h2 class="text-danger">Are you sure you want to delete this?</h2>
            </div>
            <div class="card-body">
                <dl class="row">
                    @{
                        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
                        Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

                        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                        {
                            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                            {
                                <dt class="col-sm-2">
                                    @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                                </dt>

                                PropertyInfo imageProp = propsThatShouldBeDisplayedAsImages.FirstOrDefault(X => X.Name == @GetValueExpression(property));
                                if(imageProp == null){
                                    <dd class="col-sm-10">
                                        @@Html.DisplayFor(model => model.@GetValueExpression(property))
                                    </dd>
                                }
                                else 
                                { 
                                    (PropertyInfo[] props, dynamic attribute)? displayAsImageProps = GetAttributesPropsOfProperty(imageProp,"AspAdminTemplate.Attributes.DisplayAsImageAttribute");
                                    string baseUrl = displayAsImageProps == null ? true : displayAsImageProps.Value.props.FirstOrDefault(x => x.Name == "BaseUrl").GetValue(displayAsImageProps.Value.attribute).ToString();
                                    string imageBackground = displayAsImageProps == null ? true : displayAsImageProps.Value.props.FirstOrDefault(x => x.Name == "ImageBackground").GetValue(displayAsImageProps.Value.attribute).ToString();
                                    
                                    <dd class="col-sm-10">
                                        @@Html.DisplayAsImage("@(baseUrl)",Model.@GetValueExpression(property),"",imageBackground:ImageBackground.@(imageBackground),cssClass:"img")
                                    </dd>
                                }
                            }
                            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                            {
                                <dt class="col-sm-2">
                                    @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                                </dt>

                                PropertyInfo imageProp = propsThatShouldBeDisplayedAsImages.FirstOrDefault(X => X.Name == @GetValueExpression(property));
                                if(imageProp == null){
                                    <dd class="col-sm-10">
                                        @@Html.DisplayFor(model => model.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
                                    </dd>
                                }
                                else 
                                { 
                                    (PropertyInfo[] props, dynamic attribute)? displayAsImageProps = GetAttributesPropsOfProperty(imageProp,"AspAdminTemplate.Attributes.DisplayAsImageAttribute");
                                    string baseUrl = displayAsImageProps == null ? true : displayAsImageProps.Value.props.FirstOrDefault(x => x.Name == "BaseUrl").GetValue(displayAsImageProps.Value.attribute).ToString();
                                    string imageBackground = displayAsImageProps == null ? true : displayAsImageProps.Value.props.FirstOrDefault(x => x.Name == "ImageBackground").GetValue(displayAsImageProps.Value.attribute).ToString();
                                    
                                    <dd class="col-sm-10">
                                        @@Html.DisplayAsImage("@(baseUrl)",Model.@GetValueExpression(navigation).@navigation.DisplayPropertyName,"",imageBackground:ImageBackground.@(imageBackground),cssClass:"img")
                                    </dd>   
                                }
                            }
                        }
                    @:</dl>
                    @:
                    @:<form asp-action="@Model.ViewName">
                        foreach (var property in Model.ModelMetadata.Properties)
                        {
                            if (property.IsPrimaryKey)
                            {
                                @:<input type="hidden" asp-for="@GetValueExpression(property)" />
                            }
                        }
                        @:<input type="hidden" name="returnUrl" value="@@ViewBag.returnUrl"/>
                        @:<input type="submit" value="Delete" class="btn btn-danger" />
                        @:<a href="@@ViewBag.returnUrl" class="btn btn-secondary">Back to List</a>
                    @:</form>
                @:</div>
            @:</div>
        @:</div>
    @:</div>
    @:</section>
if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
{
    //ClearIndent();
    @:</body>
    @:</html>
}
                    }
                    @functions
{
                        string GetValueExpression(IPropertyMetadata property)
                        {
                            return property.PropertyName;
                        }

                        string GetValueExpression(INavigationMetadata navigation)
                        {
                            return navigation.AssociationPropertyName;
                        }

                        List<PropertyInfo> GetPropsByAttribute(string attributeName)
                        {
                            List<PropertyInfo> resultProps = new List<PropertyInfo>();
                            Type modelType = Model.ModelMetadata.ModelType;
                            PropertyInfo[] props = modelType.GetProperties();
                            //Loop props
                            foreach (PropertyInfo prop in props)
                            {
                                //loop Props Attributes
                                foreach (var att in prop.GetCustomAttributes(true))
                                {
                                    //if this prop has the att that we are looking for.
                                    if (att.ToString() == attributeName)
                                    {
                                        resultProps.Add(prop);
                                    }
                                }
                            }

                            return resultProps;
                        }

                        (PropertyInfo[] props, dynamic attribute)? GetAttributesPropsOfProperty(PropertyInfo prop, string attributeName)
                        {
                            foreach (var att in prop.GetCustomAttributes(true))
                            {
                                if (att.ToString() == attributeName)
                                {
                                    return (att.GetType().GetProperties(), att);
                                }
                            }

                            return null;
                        }

                    }